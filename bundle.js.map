{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game_of_life/./src/Cell.ts","webpack://game_of_life/./src/GameOfLife.ts","webpack://game_of_life/./src/GameRender.ts","webpack://game_of_life/./src/GameBoard.ts","webpack://game_of_life/./src/index.ts"],"sourcesContent":["export interface ICell {\n  x: number;\n  y: number;\n  alive: boolean;\n}\n\nexport class Cell implements ICell {\n  constructor(public x: number, public y: number, public alive: boolean) {}\n}\n","import { GameRenderer, IGameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\nimport { Cell } from \"./Cell\";\n\nexport interface IGame {\n  // [x: string]: any;\n  setCell(x: number, y: number, alive: boolean): void;\n  isCellAlive(x: number, y: number): boolean;\n  getNextGeneration(): void;\n  countAliveNeighbors(x: number, y: number): number;\n  toggleCell(x: number, y: number): void;\n  stopGame(): void;\n  startGame(): void;\n  clearGameField(): void;\n  areAnyCellAlive(grid: Cell[][]): boolean;\n  getSpeed(): number;\n  setRenderer(render: IGameRenderer): void;\n}\n\nexport class GameOfLife implements IGame {\n  private width: number;\n  private height: number;\n  public grid: Cell[][];\n  private isGameRunning: boolean = false;\n  private gameIntervalId: NodeJS.Timeout | null = null;\n  private renderer: GameRenderer | null;\n  private gameBoard: GameBoard;\n  private hasChanges: boolean = true;\n  private interval: number;\n\n  constructor(gameBoard: GameBoard, gameSpeed: number) {\n    this.renderer = null;\n    this.gameBoard = gameBoard;\n    this.interval = gameSpeed;\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    this.grid = this.gameBoard.getGrid();\n  }\n\n  public getSpeed(): number {\n    return this.interval;\n  }\n\n  public setRenderer(render: GameRenderer): void {\n    this.renderer = render;\n  }\n\n  isCellAlive(x: number, y: number): boolean {\n    this.grid = this.gameBoard.getGrid();\n    return this.grid[x][y].alive;\n  }\n\n  setCell(x: number, y: number, alive: boolean): void {\n    this.grid[x][y].alive = alive;\n  }\n\n  toggleCell(x: number, y: number): void {\n    const currentAlive = this.isCellAlive(x, y);\n    this.setCell(x, y, !currentAlive);\n    this.gameBoard.updateGrid(this.grid);\n  }\n\n  getNextGeneration() {\n    this.grid = this.gameBoard.getGrid();\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    const newGird: Cell[][] = Array.from({ length: this.height }, () =>\n      Array.from({ length: this.width }, () => new Cell(0, 0, false))\n    );\n\n    this.hasChanges = false;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const cell: Cell = this.grid[i][j];\n        const neighbors = this.countAliveNeighbors(i, j);\n\n        if (cell.alive) {\n          if (neighbors < 2 || neighbors > 3) {\n            //умирает\n            newGird[i][j].alive = false;\n            this.hasChanges = true;\n          } else {\n            //отсается живой\n            newGird[i][j].alive = true;\n          }\n        } else {\n          if (neighbors === 3) {\n            //клетка оживает\n            newGird[i][j].alive = true;\n            this.hasChanges = true;\n          } else {\n            newGird[i][j].alive = false;\n          }\n        }\n      }\n    }\n    this.gameBoard.updateGrid(newGird);\n  }\n\n  countAliveNeighbors(x: number, y: number) {\n    let result = 0;\n\n    const xMoveUp = (x: number): number => (x === 0 ? this.height - 1 : x - 1);\n    const xMoveDown = (x: number): number =>\n      x === this.height - 1 ? 0 : x + 1;\n    const yMoveLeft = (y: number): number => (y === 0 ? this.width - 1 : y - 1);\n    const yMoveRight = (y: number): number =>\n      y === this.width - 1 ? 0 : y + 1;\n\n    //up\n    if (this.grid[xMoveUp(x)][y].alive) {\n      result++;\n    }\n    //down\n    if (this.grid[xMoveDown(x)][y].alive) {\n      result++;\n    }\n    //left\n    if (this.grid[x][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //Right\n    if (this.grid[x][yMoveRight(y)].alive) {\n      result++;\n    }\n    //up-left\n    if (this.grid[xMoveUp(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //up-right\n    if (this.grid[xMoveUp(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    //down-left\n    if (this.grid[xMoveDown(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //down-right\n    if (this.grid[xMoveDown(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    return result;\n  }\n\n  public startGame() {\n    if (this.isGameRunning) {\n      console.log(\"Игра уже запущена.\");\n      return;\n    }\n\n    this.isGameRunning = true;\n\n    if (this.renderer) {\n      const speed = this.renderer.getSpeed();\n\n      if (speed) {\n        this.gameIntervalId = setInterval(() => {\n          if (!this.areAnyCellAlive(this.grid)) {\n            this.stopGame();\n            console.log(\"Игра остановлена: все клетки мертвы.\");\n            return;\n          }\n\n          this.getNextGeneration();\n          if (!this.hasChanges) {\n            this.stopGame();\n            console.log(\"Игра остановлена: состояние не изменилось.\");\n            return;\n          }\n          if (this.renderer) {\n            this.renderer.draw();\n          }\n        }, speed);\n      }\n    }\n  }\n\n  public stopGame() {\n    if (!this.isGameRunning) {\n      console.log(\"Игра не была запущена.\");\n      return;\n    }\n\n    if (this.gameIntervalId !== null) {\n      clearInterval(this.gameIntervalId);\n    }\n\n    this.isGameRunning = false;\n  }\n\n  clearGameField(): void {\n    if (this.isGameRunning) {\n      this.stopGame();\n    }\n    this.gameBoard.setGameBoard(\n      this.gameBoard.getHeight(),\n      this.gameBoard.getWidth()\n    );\n    if (this.renderer) {\n      this.renderer.draw();\n    } else {\n      console.log(\"No renderer\");\n      return;\n    }\n  }\n\n  areAnyCellAlive(grid: Cell[][]): boolean {\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        if (grid[x][y].alive) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n","import { IGameBoard } from \"./GameBoard\";\nimport { IGame } from \"./GameOfLife\";\n\nexport interface IGameRenderer {\n  draw(): void;\n  setGameBoard(gameBoard: IGameBoard): void;\n  getSpeed(): number;\n}\n\nexport class GameRenderer implements IGameRenderer {\n  private container: HTMLElement;\n  private canvasContainer: HTMLElement;\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private cellSize = 10;\n  private gameBoard: IGameBoard;\n  private gameOfLife: IGame;\n  private width: number;\n  private height: number;\n  private speed: number;\n\n  constructor(\n    container: HTMLElement,\n    gameBoard: IGameBoard,\n    gameOfLife: IGame\n  ) {\n    this.container = container;\n    this.canvasContainer = document.createElement(\"div\");\n    this.canvasContainer.classList.add(\"div-field\");\n    this.container.appendChild(this.canvasContainer);\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"game-canvas\";\n    this.canvas.width = 0;\n    this.canvas.height = 0;\n    this.canvasContainer.appendChild(this.canvas);\n    this.context = this.canvas.getContext(\"2d\")!;\n    this.gameBoard = gameBoard;\n    this.gameOfLife = gameOfLife;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.speed = this.gameOfLife.getSpeed();\n\n    const divMenu = document.createElement(\"div\");\n\n    const inputHeight = document.createElement(\"input\");\n    const inputWidth = document.createElement(\"input\");\n    const inputSpeedGame = document.createElement(\"input\");\n    const spanHeight = document.createElement(\"span\");\n    const spanWidth = document.createElement(\"span\");\n    const spanSpeed = document.createElement(\"span\");\n    const lableWidth = document.createElement(\"lable\");\n    const lableHeight = document.createElement(\"lable\");\n    const lableSpeed = document.createElement(\"lable\");\n    const stopButton = document.createElement(\"button\");\n    const startButton = document.createElement(\"button\");\n    const clearButton = document.createElement(\"button\");\n\n    container.prepend(divMenu);\n\n    divMenu.appendChild(lableHeight);\n    divMenu.appendChild(spanHeight);\n    divMenu.appendChild(inputHeight);\n    divMenu.appendChild(lableWidth);\n    divMenu.appendChild(spanWidth);\n    divMenu.appendChild(inputWidth);\n    divMenu.appendChild(lableSpeed);\n    divMenu.appendChild(spanSpeed);\n    divMenu.appendChild(inputSpeedGame);\n    divMenu.appendChild(stopButton);\n    divMenu.appendChild(startButton);\n    divMenu.appendChild(clearButton);\n\n    divMenu.classList.add(\"div-menu\");\n    stopButton.classList.add(\"button-stop\");\n    startButton.classList.add(\"button-start\");\n    clearButton.classList.add(\"button-clear\");\n    spanHeight.classList.add(\"span-value-height\");\n    spanWidth.classList.add(\"span-value-width\");\n    spanWidth.classList.add(\"span-value-speed\");\n\n    //кнопки старт и стоп\n    stopButton.textContent = \"Stop\";\n    startButton.textContent = \"Start\";\n    clearButton.textContent = \"Clear\";\n\n    //присвоение класса и типа для инпут высота\n\n    inputWidth.type = \"range\";\n    inputWidth.min = \"10\";\n    inputWidth.max = \"100\";\n    inputWidth.step = \"1\";\n    inputWidth.value = \"50\";\n    inputWidth.id = \"width-input\";\n    spanWidth.textContent = inputWidth.value;\n    lableWidth.setAttribute(\"for\", \"width-input\");\n    lableWidth.textContent = \"Width: \";\n\n    //присвоение класса и типа для инпут ширина\n\n    inputHeight.type = \"range\";\n    inputHeight.min = \"10\";\n    inputHeight.max = \"100\";\n    inputHeight.step = \"1\";\n    inputHeight.value = \"50\";\n    inputHeight.id = \"height-input\";\n    spanHeight.textContent = inputHeight.value;\n    lableHeight.setAttribute(\"for\", \"height-input\");\n    lableHeight.textContent = \"Height: \";\n\n    inputSpeedGame.type = \"range\";\n    inputSpeedGame.min = \"0.01\";\n    inputSpeedGame.max = \"2\";\n    inputSpeedGame.step = \"0.01\";\n    inputSpeedGame.value = \"1\";\n    inputSpeedGame.id = \"speed-input\";\n    spanSpeed.textContent = inputSpeedGame.value;\n    lableSpeed.setAttribute(\"for\", \"speed-input\");\n    lableSpeed.textContent = \"Game speed : \";\n\n    inputHeight.addEventListener(\"input\", () => {\n      spanHeight.textContent = inputHeight.value;\n      this.height = +inputHeight.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputWidth.addEventListener(\"input\", () => {\n      spanWidth.textContent = inputWidth.value;\n      this.width = +inputWidth.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputSpeedGame.addEventListener(\"input\", () => {\n      spanSpeed.textContent = inputSpeedGame.value;\n      this.speed = +inputSpeedGame.value * 1000;\n    });\n\n    startButton.addEventListener(\"click\", () => {\n      this.gameOfLife.startGame();\n    });\n\n    stopButton.addEventListener(\"click\", () => {\n      this.gameOfLife.stopGame();\n    });\n\n    clearButton.addEventListener(\"click\", () => {\n      this.gameOfLife.clearGameField();\n    });\n\n    this.canvas.addEventListener(\"click\", this.onClick.bind(this));\n  }\n\n  public draw(): void {\n    if (!this.gameBoard) {\n      console.warn(\"GameBoard is not set.\");\n      return;\n    }\n\n    this.canvas.height = this.height * this.cellSize;\n    this.canvas.width = this.width * this.cellSize;\n    this.context.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n    const grid = this.gameBoard.getGrid();\n\n    for (let x = 0; x < this.height; x++) {\n      for (let y = 0; y < this.width; y++) {\n        this.context.fillStyle = grid[x][y].alive ? \"black\" : \"white\";\n        this.context.fillRect(\n          y * this.cellSize,\n          x * this.cellSize,\n          this.cellSize,\n          this.cellSize\n        );\n      }\n    }\n  }\n\n  private onClick = (event: MouseEvent): void => {\n    const y = Math.floor(event.offsetX / this.cellSize);\n    const x = Math.floor(event.offsetY / this.cellSize);\n\n    if (x >= 0 && x < this.height && y >= 0 && y < this.width) {\n      this.gameOfLife.toggleCell(x, y);\n      this.draw();\n    } else {\n      console.error(`Coordinates (${x}, ${y}) are outside the grid.`);\n    }\n  };\n\n  public setGameBoard(gameBoard: IGameBoard): void {\n    this.gameBoard = gameBoard;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.draw();\n  }\n\n  public getSpeed() {\n    return this.speed;\n  }\n}\n","import { Cell } from \"./Cell\";\n\nexport interface IGameBoard {\n  getWidth(): number;\n  getHeight(): number;\n  getGrid(): Cell[][];\n  updateGrid(grid: Cell[][]): void;\n  setGameBoard(height: number, width: number): void;\n}\n\nexport class GameBoard implements IGameBoard {\n  private width: number;\n  private height: number;\n  private grid: Cell[][];\n\n  constructor(height: number, width: number) {\n    this.height = height;\n    this.width = width;\n    this.grid = this.initializeGrid();\n  }\n\n  private initializeGrid(): Cell[][] {\n    const grid: Cell[][] = [];\n    for (let x = 0; x < this.height; x++) {\n      grid[x] = [];\n      for (let y = 0; y < this.width; y++) {\n        grid[x][y] = new Cell(x, y, false);\n      }\n    }\n    return grid;\n  }\n\n  public getGrid(): Cell[][] {\n    return this.grid;\n  }\n\n  public getWidth(): number {\n    return this.width;\n  }\n\n  public getHeight(): number {\n    return this.height;\n  }\n\n  public setGameBoard(height: number, width: number): void {\n    this.width = width;\n    this.height = height;\n    this.grid = this.initializeGrid();\n  }\n\n  public updateGrid(grid: Cell[][]): void {\n    this.grid = grid;\n  }\n}\n","import \"./css/style.css\";\nimport { GameOfLife } from \"./GameOfLife\";\nimport { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\n\nconst gameContainer = document.getElementById(\"app\")!;\n\nconst height: number = 50;\nconst width: number = 50;\nconst gameSpeed: number = 1000;\n\nconst board = new GameBoard(height, width);\nconst game = new GameOfLife(board, gameSpeed);\nconst renderer = new GameRenderer(gameContainer, board, game);\n\nrenderer.setGameBoard(board);\ngame.setRenderer(renderer);\n"],"names":["Cell","_createClass","x","y","alive","_classCallCheck","GameOfLife","gameBoard","gameSpeed","_defineProperty","this","renderer","interval","height","getHeight","width","getWidth","grid","getGrid","key","value","render","currentAlive","isCellAlive","setCell","updateGrid","_this","newGird","Array","from","length","hasChanges","i","j","cell","neighbors","countAliveNeighbors","_this2","result","xMoveUp","xMoveDown","yMoveLeft","yMoveRight","_this3","isGameRunning","console","log","speed","getSpeed","gameIntervalId","setInterval","areAnyCellAlive","getNextGeneration","draw","stopGame","clearInterval","setGameBoard","GameRenderer","container","gameOfLife","event","Math","floor","offsetX","cellSize","offsetY","toggleCell","error","concat","canvasContainer","document","createElement","classList","add","appendChild","canvas","id","context","getContext","divMenu","inputHeight","inputWidth","inputSpeedGame","spanHeight","spanWidth","spanSpeed","lableWidth","lableHeight","lableSpeed","stopButton","startButton","clearButton","prepend","textContent","type","min","max","step","setAttribute","addEventListener","startGame","clearGameField","onClick","bind","clearRect","fillStyle","fillRect","warn","GameBoard","initializeGrid","gameContainer","getElementById","board","game","setRenderer"],"sourceRoot":""}