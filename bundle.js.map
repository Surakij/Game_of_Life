{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game_of_life/./src/Cell.ts","webpack://game_of_life/./src/GameOfLife.ts","webpack://game_of_life/./src/GameRender.ts","webpack://game_of_life/./src/GameBoard.ts","webpack://game_of_life/./src/index.ts"],"sourcesContent":["export interface ICell {\n  x: number;\n  y: number;\n  alive: boolean;\n}\n\nexport class Cell implements ICell {\n  constructor(public x: number, public y: number, public alive: boolean) {}\n}\n","import { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\nimport { Cell } from \"./Cell\";\n\nexport interface IGame {\n  setCell(x: number, y: number, alive: boolean): void;\n  isCellAlive(x: number, y: number): boolean;\n  getNextGeneration(): void;\n  countAliveNeighbors(x: number, y: number): number;\n  toggleCell(x: number, y: number): void;\n  stopGame(): void;\n  startGame(): void;\n}\n\nexport class GameOfLife implements IGame {\n  private width: number;\n  private height: number;\n  public grid: Cell[][];\n  private isGameRunning: boolean = false;\n  private gameIntervalId: NodeJS.Timeout | null = null;\n  private renderer: GameRenderer | null;\n  private gameBoard: GameBoard;\n\n  constructor(gameBoard: GameBoard) {\n    this.renderer = null;\n    this.gameBoard = gameBoard;\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    this.grid = this.gameBoard.getGrid();\n  }\n\n  setRenderer(render: GameRenderer): void {\n    this.renderer = render;\n  }\n\n  isCellAlive(x: number, y: number): boolean {\n    this.grid = this.gameBoard.getGrid();\n    return this.grid[x][y].alive;\n  }\n\n  setCell(x: number, y: number, alive: boolean): void {\n    this.grid[x][y].alive = alive;\n  }\n\n  toggleCell(x: number, y: number): void {\n    const currentAlive = this.isCellAlive(x, y);\n    this.setCell(x, y, !currentAlive);\n    this.gameBoard.updateGrid(this.grid);\n  }\n\n  getNextGeneration() {\n    this.grid = this.gameBoard.getGrid();\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    const newGird: Cell[][] = Array.from({ length: this.height }, () =>\n      Array.from({ length: this.width }, () => new Cell(0, 0, false))\n    );\n    console.log(\"newGrid at GameOfLife: \", newGird);\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const cell: Cell = this.grid[i][j];\n        const neighbors = this.countAliveNeighbors(i, j);\n        console.log(\"cell: \", cell, \"neighbors: \", neighbors);\n\n        if (cell.alive) {\n          if (neighbors < 2 || neighbors > 3) {\n            //умирает\n            newGird[i][j].alive = false;\n          } else {\n            //отсается живой\n            newGird[i][j].alive = true;\n          }\n        } else {\n          if (neighbors === 3) {\n            //клетка оживает\n            newGird[i][j].alive = true;\n          } else {\n            newGird[i][j].alive = false;\n          }\n        }\n      }\n    }\n    this.gameBoard.updateGrid(newGird);\n  }\n\n  countAliveNeighbors(x: number, y: number) {\n    let result = 0;\n\n    const xMoveUp = (x: number): number => (x === 0 ? this.height - 1 : x - 1);\n    const xMoveDown = (x: number): number =>\n      x === this.height - 1 ? 0 : x + 1;\n    const yMoveLeft = (y: number): number => (y === 0 ? this.width - 1 : y - 1);\n    const yMoveRight = (y: number): number =>\n      y === this.width - 1 ? 0 : y + 1;\n\n    //up\n    if (this.grid[xMoveUp(x)][y].alive) {\n      result++;\n    }\n    //down\n    if (this.grid[xMoveDown(x)][y].alive) {\n      result++;\n    }\n    //left\n    if (this.grid[x][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //Right\n    if (this.grid[x][yMoveRight(y)].alive) {\n      result++;\n    }\n    //up-left\n    if (this.grid[xMoveUp(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //up-right\n    if (this.grid[xMoveUp(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    //down-left\n    if (this.grid[xMoveDown(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //down-right\n    if (this.grid[xMoveDown(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    return result;\n  }\n\n  public startGame(interval: number = 100) {\n    if (this.isGameRunning) {\n      console.log(\"Игра уже запущена.\");\n      return;\n    }\n\n    this.isGameRunning = true;\n\n    this.gameIntervalId = setInterval(() => {\n      this.getNextGeneration();\n      if (this.renderer) {\n        this.renderer.draw();\n      }\n    }, interval);\n  }\n\n  stopGame() {\n    if (!this.isGameRunning) {\n      console.log(\"Игра не была запущена.\");\n      return;\n    }\n\n    if (this.gameIntervalId !== null) {\n      clearInterval(this.gameIntervalId);\n    }\n\n    this.isGameRunning = false;\n  }\n}\n","import { IGameBoard } from \"./GameBoard\";\nimport { IGame } from \"./GameOfLife\";\n\nexport interface IGameRenderer {\n  draw(): void;\n  setGameBoard(gameBoard: IGameBoard): void;\n}\n\nexport class GameRenderer implements IGameRenderer {\n  private container: HTMLElement;\n  private canvasContainer: HTMLElement;\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private cellSize = 10;\n  private gameBoard!: IGameBoard;\n  private gameOfLife: IGame;\n  private width!: number;\n  private height!: number;\n\n  constructor(\n    container: HTMLElement,\n    gameBoard: IGameBoard,\n    gameOfLife: IGame\n  ) {\n    this.container = container;\n    this.canvasContainer = document.createElement(\"div\");\n    this.canvasContainer.classList.add(\"div-field\");\n    this.container.appendChild(this.canvasContainer);\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"game-canvas\";\n    this.canvas.width = 0;\n    this.canvas.height = 0;\n    this.canvasContainer.appendChild(this.canvas);\n    this.context = this.canvas.getContext(\"2d\")!;\n    this.gameBoard = gameBoard;\n    this.gameOfLife = gameOfLife;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n\n    const divMenu = document.createElement(\"div\");\n\n    const inputHeight = document.createElement(\"input\");\n    const inputWidth = document.createElement(\"input\");\n    const spanHeight = document.createElement(\"span\");\n    const spanWidth = document.createElement(\"span\");\n    const lableWidth = document.createElement(\"lable\");\n    const lableHeight = document.createElement(\"lable\");\n    const stopButton = document.createElement(\"button\");\n    const startButton = document.createElement(\"button\");\n\n    container.appendChild(divMenu);\n\n    divMenu.appendChild(lableHeight);\n    divMenu.appendChild(inputHeight);\n    divMenu.appendChild(spanHeight);\n    divMenu.appendChild(lableWidth);\n    divMenu.appendChild(inputWidth);\n    divMenu.appendChild(spanWidth);\n    divMenu.appendChild(stopButton);\n    divMenu.appendChild(startButton);\n\n    divMenu.classList.add(\"div-menu\");\n    stopButton.classList.add(\"button-stop\");\n    startButton.classList.add(\"button-start\");\n    spanHeight.classList.add(\"span-value-height\");\n    spanWidth.classList.add(\"span-value-width\");\n\n    //кнопки старт и стоп\n    stopButton.textContent = \"Stop\";\n    startButton.textContent = \"Start\";\n\n    //присвоение класса и типа для инпут высота\n\n    inputWidth.classList.add(\"width-range\");\n    inputWidth.type = \"range\";\n    inputWidth.min = \"10\";\n    inputWidth.max = \"100\";\n    inputWidth.step = \"1\";\n    inputWidth.value = \"50\";\n    inputWidth.id = \"width-input\";\n    spanWidth.textContent = inputWidth.value;\n    lableWidth.setAttribute(\"for\", \"width-input\");\n    lableWidth.textContent = \"width: \";\n\n    //присвоение класса и типа для инпут ширина\n\n    inputHeight.classList.add(\"height-range\");\n    inputHeight.type = \"range\";\n    inputHeight.min = \"10\";\n    inputHeight.max = \"100\";\n    inputHeight.step = \"1\";\n    inputHeight.value = \"50\";\n    inputHeight.id = \"height-input\";\n    spanHeight.textContent = inputHeight.value;\n    lableHeight.setAttribute(\"for\", \"height-input\");\n    lableHeight.textContent = \"height: \";\n\n    inputHeight.addEventListener(\"input\", () => {\n      spanHeight.textContent = inputHeight.value;\n      this.height = +inputHeight.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputWidth.addEventListener(\"input\", () => {\n      spanWidth.textContent = inputWidth.value;\n      this.width = +inputWidth.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    startButton.addEventListener(\"click\", () => {\n      this.gameOfLife.startGame();\n    });\n\n    stopButton.addEventListener(\"click\", () => {\n      this.gameOfLife.stopGame();\n    });\n\n    this.canvas.addEventListener(\"click\", this.onClick.bind(this));\n  }\n\n  public draw(): void {\n    if (!this.gameBoard) {\n      console.warn(\"GameBoard is not set.\");\n      return;\n    }\n\n    this.canvas.height = this.height * this.cellSize;\n    this.canvas.width = this.width * this.cellSize;\n    this.context.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n    const grid = this.gameBoard.getGrid();\n\n    for (let x = 0; x < this.height; x++) {\n      for (let y = 0; y < this.width; y++) {\n        this.context.fillStyle = grid[x][y].alive ? \"black\" : \"white\";\n        this.context.fillRect(\n          y * this.cellSize,\n          x * this.cellSize,\n          this.cellSize,\n          this.cellSize\n        );\n      }\n    }\n  }\n\n  private onClick = (event: MouseEvent): void => {\n    const y = Math.floor(event.offsetX / this.cellSize);\n    const x = Math.floor(event.offsetY / this.cellSize);\n\n    console.log(`Click at canvas. Cell coords: ['x: '${x}, 'y: '${y}]`);\n    this.gameOfLife.toggleCell(x, y);\n    this.draw();\n  };\n\n  public setGameBoard(gameBoard: IGameBoard): void {\n    this.gameBoard = gameBoard;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.draw();\n  }\n}\n","import { Cell } from \"./Cell\";\n\nexport interface IGameBoard {\n  getWidth(): number;\n  getHeight(): number;\n  getGrid(): Cell[][];\n  updateGrid(grid: Cell[][]): void;\n  setGameBoard(height: number, width: number): void;\n}\n\nexport class GameBoard implements IGameBoard {\n  private width: number;\n  private height: number;\n  private grid: Cell[][];\n\n  constructor(height: number, width: number) {\n    this.height = height;\n    this.width = width;\n    this.grid = this.initializeGrid();\n  }\n\n  private initializeGrid(): Cell[][] {\n    const grid: Cell[][] = [];\n    for (let x = 0; x < this.height; x++) {\n      grid[x] = [];\n      for (let y = 0; y < this.width; y++) {\n        grid[x][y] = new Cell(x, y, false);\n      }\n    }\n    return grid;\n  }\n\n  public getGrid(): Cell[][] {\n    return this.grid;\n  }\n\n  public getWidth(): number {\n    return this.width;\n  }\n\n  public getHeight(): number {\n    return this.height;\n  }\n\n  public setGameBoard(height: number, width: number): void {\n    this.width = width;\n    this.height = height;\n    this.grid = this.initializeGrid();\n  }\n\n  public updateGrid(grid: Cell[][]): void {\n    this.grid = grid;\n  }\n}\n","import \"./css/style.css\";\nimport { GameOfLife } from \"./GameOfLife\";\nimport { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\n\nconst gameContainer = document.getElementById(\"app\")!;\n\n\n\nconst board = new GameBoard(50, 50);\nconst game = new GameOfLife(board);\nconst renderer = new GameRenderer(gameContainer, board, game);\n\nrenderer.setGameBoard(board);\ngame.setRenderer(renderer);\n"],"names":["Cell","_createClass","x","y","alive","_classCallCheck","GameOfLife","gameBoard","_defineProperty","this","renderer","height","getHeight","width","getWidth","grid","getGrid","key","value","render","currentAlive","isCellAlive","setCell","updateGrid","_this","newGird","Array","from","length","console","log","i","j","cell","neighbors","countAliveNeighbors","_this2","result","xMoveUp","xMoveDown","yMoveLeft","yMoveRight","_this3","interval","arguments","undefined","isGameRunning","gameIntervalId","setInterval","getNextGeneration","draw","clearInterval","GameRenderer","container","gameOfLife","event","Math","floor","offsetX","cellSize","offsetY","concat","toggleCell","canvasContainer","document","createElement","classList","add","appendChild","canvas","id","context","getContext","divMenu","inputHeight","inputWidth","spanHeight","spanWidth","lableWidth","lableHeight","stopButton","startButton","textContent","type","min","max","step","setAttribute","addEventListener","setGameBoard","startGame","stopGame","onClick","bind","clearRect","fillStyle","fillRect","warn","GameBoard","initializeGrid","gameContainer","getElementById","board","game","setRenderer"],"sourceRoot":""}