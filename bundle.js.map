{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game_of_life/./src/Cell.ts","webpack://game_of_life/./src/GameOfLife.ts","webpack://game_of_life/./src/GameRender.ts","webpack://game_of_life/./src/GameBoard.ts","webpack://game_of_life/./src/index.ts"],"sourcesContent":["export interface ICell {\n  x: number;\n  y: number;\n  alive: boolean;\n}\n\nexport class Cell implements ICell {\n  constructor(public x: number, public y: number, public alive: boolean) {}\n}\n","import { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\nimport { Cell } from \"./Cell\";\n\nexport interface IGame {\n  setCell(x: number, y: number, alive: boolean): void;\n  isCellAlive(x: number, y: number): boolean;\n  getNextGeneration(): void;\n  countAliveNeighbors(x: number, y: number): number;\n  toggleCell(x: number, y: number): void;\n  stopGame(): void;\n  startGame(): void;\n  clearGameField(): void;\n  areAnyCellAlive(grid: Cell[][]): boolean;\n}\n\nexport class GameOfLife implements IGame {\n  private width: number;\n  private height: number;\n  public grid: Cell[][];\n  private isGameRunning: boolean = false;\n  private gameIntervalId: NodeJS.Timeout | null = null;\n  private renderer: GameRenderer | null;\n  private gameBoard: GameBoard;\n  private hasChanges: boolean = true;\n\n  constructor(gameBoard: GameBoard) {\n    this.renderer = null;\n    this.gameBoard = gameBoard;\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    this.grid = this.gameBoard.getGrid();\n  }\n\n  setRenderer(render: GameRenderer): void {\n    this.renderer = render;\n  }\n\n  isCellAlive(x: number, y: number): boolean {\n    this.grid = this.gameBoard.getGrid();\n    return this.grid[x][y].alive;\n  }\n\n  setCell(x: number, y: number, alive: boolean): void {\n    this.grid[x][y].alive = alive;\n  }\n\n  toggleCell(x: number, y: number): void {\n    const currentAlive = this.isCellAlive(x, y);\n    this.setCell(x, y, !currentAlive);\n    this.gameBoard.updateGrid(this.grid);\n  }\n\n  getNextGeneration() {\n    this.grid = this.gameBoard.getGrid();\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    const newGird: Cell[][] = Array.from({ length: this.height }, () =>\n      Array.from({ length: this.width }, () => new Cell(0, 0, false))\n    );\n\n     this.hasChanges = false;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const cell: Cell = this.grid[i][j];\n        const neighbors = this.countAliveNeighbors(i, j);\n\n        if (cell.alive) {\n          if (neighbors < 2 || neighbors > 3) {\n            //умирает\n            newGird[i][j].alive = false;\n            this.hasChanges = true;\n          } else {\n            //отсается живой\n            newGird[i][j].alive = true;\n          }\n        } else {\n          if (neighbors === 3) {\n            //клетка оживает\n            newGird[i][j].alive = true;\n            this.hasChanges = true;\n          } else {\n            newGird[i][j].alive = false;\n          }\n        }\n      }\n    }\n    this.grid = newGird;\n    this.gameBoard.updateGrid(this.grid);\n  }\n\n  countAliveNeighbors(x: number, y: number) {\n    let result = 0;\n\n    const xMoveUp = (x: number): number => (x === 0 ? this.height - 1 : x - 1);\n    const xMoveDown = (x: number): number =>\n      x === this.height - 1 ? 0 : x + 1;\n    const yMoveLeft = (y: number): number => (y === 0 ? this.width - 1 : y - 1);\n    const yMoveRight = (y: number): number =>\n      y === this.width - 1 ? 0 : y + 1;\n\n    //up\n    if (this.grid[xMoveUp(x)][y].alive) {\n      result++;\n    }\n    //down\n    if (this.grid[xMoveDown(x)][y].alive) {\n      result++;\n    }\n    //left\n    if (this.grid[x][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //Right\n    if (this.grid[x][yMoveRight(y)].alive) {\n      result++;\n    }\n    //up-left\n    if (this.grid[xMoveUp(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //up-right\n    if (this.grid[xMoveUp(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    //down-left\n    if (this.grid[xMoveDown(x)][yMoveLeft(y)].alive) {\n      result++;\n    }\n    //down-right\n    if (this.grid[xMoveDown(x)][yMoveRight(y)].alive) {\n      result++;\n    }\n    return result;\n  }\n\n  public startGame(interval: number = 100) {\n    if (this.isGameRunning) {\n      console.log(\"Игра уже запущена.\");\n      return;\n    }\n\n    this.isGameRunning = true;\n\n    this.gameIntervalId = setInterval(() => {\n      if (!this.areAnyCellAlive(this.grid)) {\n        this.stopGame();\n        console.log(\"Игра остановлена: все клетки мертвы.\");\n        return;\n      }\n\n      this.getNextGeneration();\n      if (!this.hasChanges) {\n        this.stopGame();\n        console.log(\"Игра остановлена: состояние не изменилось.\");\n        return;\n      }\n      if (this.renderer) {\n        this.renderer.draw();\n      }\n    }, interval);\n  }\n\n  public stopGame() {\n    if (!this.isGameRunning) {\n      console.log(\"Игра не была запущена.\");\n      return;\n    }\n\n    if (this.gameIntervalId !== null) {\n      clearInterval(this.gameIntervalId);\n    }\n\n    this.isGameRunning = false;\n  }\n\n  clearGameField(): void {\n    if (this.isGameRunning) {\n      this.stopGame();\n    }\n    this.gameBoard.setGameBoard(\n      this.gameBoard.getHeight(),\n      this.gameBoard.getWidth()\n    );\n    if (this.renderer) {\n      this.renderer.draw();\n    } else {\n      console.log(\"No renderer\");\n      return;\n    }\n  }\n\n  areAnyCellAlive(grid: Cell[][]): boolean {\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        if (grid[x][y].alive) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //   Игра прекращается, если\n  // на поле не останется ни одной «живой» клетки;\n  // конфигурация на очередном шаге в точности (без сдвигов и поворотов) повторит себя же на одном из более ранних шагов (складывается периодическая конфигурация)\n  // при очередном шаге ни одна из клеток не меняет своего состояния (частный случай предыдущего правила, складывается стабильная конфигурация)\n}\n","import { IGameBoard } from \"./GameBoard\";\nimport { IGame } from \"./GameOfLife\";\n\nexport interface IGameRenderer {\n  draw(): void;\n  setGameBoard(gameBoard: IGameBoard): void;\n}\n\nexport class GameRenderer implements IGameRenderer {\n  private container: HTMLElement;\n  private canvasContainer: HTMLElement;\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private cellSize = 10;\n  private gameBoard!: IGameBoard;\n  private gameOfLife: IGame;\n  private width!: number;\n  private height!: number;\n\n  constructor(\n    container: HTMLElement,\n    gameBoard: IGameBoard,\n    gameOfLife: IGame\n  ) {\n    this.container = container;\n    this.canvasContainer = document.createElement(\"div\");\n    this.canvasContainer.classList.add(\"div-field\");\n    this.container.appendChild(this.canvasContainer);\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"game-canvas\";\n    this.canvas.width = 0;\n    this.canvas.height = 0;\n    this.canvasContainer.appendChild(this.canvas);\n    this.context = this.canvas.getContext(\"2d\")!;\n    this.gameBoard = gameBoard;\n    this.gameOfLife = gameOfLife;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n\n    const divMenu = document.createElement(\"div\");\n\n    const inputHeight = document.createElement(\"input\");\n    const inputWidth = document.createElement(\"input\");\n    const spanHeight = document.createElement(\"span\");\n    const spanWidth = document.createElement(\"span\");\n    const lableWidth = document.createElement(\"lable\");\n    const lableHeight = document.createElement(\"lable\");\n    const stopButton = document.createElement(\"button\");\n    const startButton = document.createElement(\"button\");\n    const clearButton = document.createElement(\"button\");\n\n    container.appendChild(divMenu);\n\n    divMenu.appendChild(lableHeight);\n    divMenu.appendChild(inputHeight);\n    divMenu.appendChild(spanHeight);\n    divMenu.appendChild(lableWidth);\n    divMenu.appendChild(inputWidth);\n    divMenu.appendChild(spanWidth);\n    divMenu.appendChild(stopButton);\n    divMenu.appendChild(startButton);\n    divMenu.appendChild(clearButton);\n\n    divMenu.classList.add(\"div-menu\");\n    stopButton.classList.add(\"button-stop\");\n    startButton.classList.add(\"button-start\");\n    clearButton.classList.add(\"button-clear\");\n    spanHeight.classList.add(\"span-value-height\");\n    spanWidth.classList.add(\"span-value-width\");\n\n    //кнопки старт и стоп\n    stopButton.textContent = \"Stop\";\n    startButton.textContent = \"Start\";\n    clearButton.textContent = \"Clear\";\n\n    //присвоение класса и типа для инпут высота\n\n    inputWidth.classList.add(\"width-range\");\n    inputWidth.type = \"range\";\n    inputWidth.min = \"10\";\n    inputWidth.max = \"100\";\n    inputWidth.step = \"1\";\n    inputWidth.value = \"50\";\n    inputWidth.id = \"width-input\";\n    spanWidth.textContent = inputWidth.value;\n    lableWidth.setAttribute(\"for\", \"width-input\");\n    lableWidth.textContent = \"width: \";\n\n    //присвоение класса и типа для инпут ширина\n\n    inputHeight.classList.add(\"height-range\");\n    inputHeight.type = \"range\";\n    inputHeight.min = \"10\";\n    inputHeight.max = \"100\";\n    inputHeight.step = \"1\";\n    inputHeight.value = \"50\";\n    inputHeight.id = \"height-input\";\n    spanHeight.textContent = inputHeight.value;\n    lableHeight.setAttribute(\"for\", \"height-input\");\n    lableHeight.textContent = \"height: \";\n\n    inputHeight.addEventListener(\"input\", () => {\n      spanHeight.textContent = inputHeight.value;\n      this.height = +inputHeight.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputWidth.addEventListener(\"input\", () => {\n      spanWidth.textContent = inputWidth.value;\n      this.width = +inputWidth.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    startButton.addEventListener(\"click\", () => {\n      this.gameOfLife.startGame();\n    });\n\n    stopButton.addEventListener(\"click\", () => {\n      this.gameOfLife.stopGame();\n    });\n\n    clearButton.addEventListener(\"click\", () => {\n      this.gameOfLife.clearGameField();\n    });\n\n    this.canvas.addEventListener(\"click\", this.onClick.bind(this));\n  }\n\n  public draw(): void {\n    if (!this.gameBoard) {\n      console.warn(\"GameBoard is not set.\");\n      return;\n    }\n\n    this.canvas.height = this.height * this.cellSize;\n    this.canvas.width = this.width * this.cellSize;\n    this.context.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n    const grid = this.gameBoard.getGrid();\n\n    for (let x = 0; x < this.height; x++) {\n      for (let y = 0; y < this.width; y++) {\n        this.context.fillStyle = grid[x][y].alive ? \"black\" : \"white\";\n        this.context.fillRect(\n          y * this.cellSize,\n          x * this.cellSize,\n          this.cellSize,\n          this.cellSize\n        );\n      }\n    }\n  }\n\n  private onClick = (event: MouseEvent): void => {\n    const y = Math.floor(event.offsetX / this.cellSize);\n    const x = Math.floor(event.offsetY / this.cellSize);\n\n    this.gameOfLife.toggleCell(x, y);\n    this.draw();\n  };\n\n  public setGameBoard(gameBoard: IGameBoard): void {\n    this.gameBoard = gameBoard;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.draw();\n  }\n}\n","import { Cell } from \"./Cell\";\n\nexport interface IGameBoard {\n  getWidth(): number;\n  getHeight(): number;\n  getGrid(): Cell[][];\n  updateGrid(grid: Cell[][]): void;\n  setGameBoard(height: number, width: number): void;\n}\n\nexport class GameBoard implements IGameBoard {\n  private width: number;\n  private height: number;\n  private grid: Cell[][];\n\n  constructor(height: number, width: number) {\n    this.height = height;\n    this.width = width;\n    this.grid = this.initializeGrid();\n  }\n\n  private initializeGrid(): Cell[][] {\n    const grid: Cell[][] = [];\n    for (let x = 0; x < this.height; x++) {\n      grid[x] = [];\n      for (let y = 0; y < this.width; y++) {\n        grid[x][y] = new Cell(x, y, false);\n      }\n    }\n    return grid;\n  }\n\n  public getGrid(): Cell[][] {\n    return this.grid;\n  }\n\n  public getWidth(): number {\n    return this.width;\n  }\n\n  public getHeight(): number {\n    return this.height;\n  }\n\n  public setGameBoard(height: number, width: number): void {\n    this.width = width;\n    this.height = height;\n    this.grid = this.initializeGrid();\n  }\n\n  public updateGrid(grid: Cell[][]): void {\n    this.grid = grid;\n  }\n}\n","import \"./css/style.css\";\nimport { GameOfLife } from \"./GameOfLife\";\nimport { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\n\nconst gameContainer = document.getElementById(\"app\")!;\n\n\n\nconst board = new GameBoard(50, 50);\nconst game = new GameOfLife(board);\nconst renderer = new GameRenderer(gameContainer, board, game);\n\nrenderer.setGameBoard(board);\ngame.setRenderer(renderer);\n"],"names":["Cell","_createClass","x","y","alive","_classCallCheck","GameOfLife","gameBoard","_defineProperty","this","renderer","height","getHeight","width","getWidth","grid","getGrid","key","value","render","currentAlive","isCellAlive","setCell","updateGrid","_this","newGird","Array","from","length","hasChanges","i","j","cell","neighbors","countAliveNeighbors","_this2","result","xMoveUp","xMoveDown","yMoveLeft","yMoveRight","_this3","interval","arguments","undefined","isGameRunning","console","log","gameIntervalId","setInterval","areAnyCellAlive","getNextGeneration","draw","stopGame","clearInterval","setGameBoard","GameRenderer","container","gameOfLife","event","Math","floor","offsetX","cellSize","offsetY","toggleCell","canvasContainer","document","createElement","classList","add","appendChild","canvas","id","context","getContext","divMenu","inputHeight","inputWidth","spanHeight","spanWidth","lableWidth","lableHeight","stopButton","startButton","clearButton","textContent","type","min","max","step","setAttribute","addEventListener","startGame","clearGameField","onClick","bind","clearRect","fillStyle","fillRect","warn","GameBoard","initializeGrid","gameContainer","getElementById","board","game","setRenderer"],"sourceRoot":""}