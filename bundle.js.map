{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game_of_life/./src/Cell.ts","webpack://game_of_life/./src/GameOfLife.ts","webpack://game_of_life/./src/GameRender.ts","webpack://game_of_life/./src/GameBoard.ts","webpack://game_of_life/./src/index.ts"],"sourcesContent":["export interface ICell {\n  x: number;\n  y: number;\n  alive: boolean;\n}\n\nexport class Cell implements ICell {\n  constructor(public x: number, public y: number, public alive: boolean) {\n    if (x < 0 || y < 0) {\n      throw new Error(\"Coordinates must be non-negative\");\n    }\n\n    this.x = x;\n    this.y = y;\n    this.alive = alive;\n  }\n}\n","import { GameRenderer, IGameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\nimport { Cell } from \"./Cell\";\n\nexport interface IGame {\n  setCell(x: number, y: number, alive: boolean): void;\n  isCellAlive(x: number, y: number): boolean;\n  getNextGeneration(): void;\n  countAliveNeighbors(x: number, y: number): number;\n  toggleCell(x: number, y: number): void;\n  stopGame(): void;\n  startGame(): void;\n  clearGameField(): void;\n  areAnyCellAlive(grid: Cell[][]): boolean;\n  getSpeed(): number;\n  setRenderer(render: IGameRenderer): void;\n}\n\nexport class GameOfLife implements IGame {\n  private width: number;\n\n  private height: number;\n\n  public grid: Cell[][];\n\n  private isGameRunning = false;\n\n  private gameIntervalId: NodeJS.Timeout | null = null;\n\n  private renderer: GameRenderer | null;\n\n  private gameBoard: GameBoard;\n\n  private hasChanges = true;\n\n  private interval: number;\n\n  constructor(gameBoard: GameBoard, gameSpeed: number) {\n    this.renderer = null;\n    this.gameBoard = gameBoard;\n    this.interval = gameSpeed;\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    this.grid = this.gameBoard.getGrid();\n  }\n\n  public getSpeed(): number {\n    return this.interval;\n  }\n\n  public setRenderer(render: GameRenderer): void {\n    this.renderer = render;\n  }\n\n  isCellAlive(x: number, y: number): boolean {\n    this.grid = this.gameBoard.getGrid();\n    return this.grid[x][y].alive;\n  }\n\n  setCell(x: number, y: number, alive: boolean): void {\n    this.grid[x][y].alive = alive;\n  }\n\n  toggleCell(x: number, y: number): void {\n    const currentAlive = this.isCellAlive(x, y);\n    this.setCell(x, y, !currentAlive);\n    this.gameBoard.updateGrid(this.grid);\n  }\n\n  getNextGeneration() {\n    this.grid = this.gameBoard.getGrid();\n    this.height = this.gameBoard.getHeight();\n    this.width = this.gameBoard.getWidth();\n    const newGird: Cell[][] = Array.from({ length: this.height }, () =>\n      Array.from({ length: this.width }, () => new Cell(0, 0, false))\n    );\n\n    this.hasChanges = false;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const cell: Cell = this.grid[i][j];\n        const neighbors = this.countAliveNeighbors(i, j);\n\n        if (cell.alive) {\n          if (neighbors < 2 || neighbors > 3) {\n            // умирает\n            newGird[i][j].alive = false;\n            this.hasChanges = true;\n          } else {\n            // отсается живой\n            newGird[i][j].alive = true;\n          }\n        } else if (neighbors === 3) {\n          // клетка оживает\n          newGird[i][j].alive = true;\n          this.hasChanges = true;\n        } else {\n          newGird[i][j].alive = false;\n        }\n      }\n    }\n    this.gameBoard.updateGrid(newGird);\n  }\n\n  countAliveNeighbors(i: number, j: number) {\n    let result = 0;\n\n    const xMoveUp = (x: number): number => (x === 0 ? this.height - 1 : x - 1);\n    const xMoveDown = (x: number): number =>\n      x === this.height - 1 ? 0 : x + 1;\n    const yMoveLeft = (y: number): number => (y === 0 ? this.width - 1 : y - 1);\n    const yMoveRight = (y: number): number =>\n      y === this.width - 1 ? 0 : y + 1;\n\n    // up\n    if (this.grid[xMoveUp(i)][j].alive) {\n      result++;\n    }\n    // down\n    if (this.grid[xMoveDown(i)][j].alive) {\n      result++;\n    }\n    // left\n    if (this.grid[i][yMoveLeft(j)].alive) {\n      result++;\n    }\n    // Right\n    if (this.grid[i][yMoveRight(j)].alive) {\n      result++;\n    }\n    // up-left\n    if (this.grid[xMoveUp(i)][yMoveLeft(j)].alive) {\n      result++;\n    }\n    // up-right\n    if (this.grid[xMoveUp(i)][yMoveRight(j)].alive) {\n      result++;\n    }\n    // down-left\n    if (this.grid[xMoveDown(i)][yMoveLeft(j)].alive) {\n      result++;\n    }\n    // down-right\n    if (this.grid[xMoveDown(i)][yMoveRight(j)].alive) {\n      result++;\n    }\n    return result;\n  }\n\n  public startGame() {\n    if (this.isGameRunning) {\n      console.log(\"Игра уже запущена.\");\n      return;\n    }\n\n    this.isGameRunning = true;\n\n    if (this.renderer) {\n      const speed = this.renderer.getSpeed();\n\n      if (speed) {\n        this.gameIntervalId = setInterval(() => {\n          if (!this.areAnyCellAlive(this.grid)) {\n            this.stopGame();\n            console.log(\"Игра остановлена: все клетки мертвы.\");\n            return;\n          }\n\n          this.getNextGeneration();\n          if (!this.hasChanges) {\n            this.stopGame();\n            console.log(\"Игра остановлена: состояние не изменилось.\");\n            return;\n          }\n          if (this.renderer) {\n            this.renderer.draw();\n          }\n        }, speed);\n      }\n    }\n  }\n\n  public stopGame() {\n    if (!this.isGameRunning) {\n      console.log(\"Игра не была запущена.\");\n      return;\n    }\n\n    if (this.gameIntervalId !== null) {\n      clearInterval(this.gameIntervalId);\n    }\n\n    this.isGameRunning = false;\n  }\n\n  clearGameField(): void {\n    if (this.isGameRunning) {\n      this.stopGame();\n    }\n    this.gameBoard.setGameBoard(\n      this.gameBoard.getHeight(),\n      this.gameBoard.getWidth()\n    );\n    if (this.renderer) {\n      this.renderer.draw();\n    } else {\n      console.log(\"No renderer\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public areAnyCellAlive(grid: Cell[][]): boolean {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j].alive) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n","import { IGameBoard } from \"./GameBoard\";\nimport { IGame } from \"./GameOfLife\";\n\nexport interface IGameRenderer {\n  draw(): void;\n  setGameBoard(gameBoard: IGameBoard): void;\n  getSpeed(): number;\n}\n\nexport class GameRenderer implements IGameRenderer {\n  private container: HTMLElement;\n\n  private canvasContainer: HTMLElement;\n\n  private canvas: HTMLCanvasElement;\n\n  private context: CanvasRenderingContext2D;\n\n  private cellSize = 10;\n\n  private gameBoard: IGameBoard;\n\n  private gameOfLife: IGame;\n\n  private width: number;\n\n  private height: number;\n\n  private speed: number;\n\n  constructor(\n    container: HTMLElement,\n    gameBoard: IGameBoard,\n    gameOfLife: IGame\n  ) {\n    this.container = container;\n    this.canvasContainer = document.createElement(\"div\");\n    this.canvasContainer.classList.add(\"div-field\");\n    this.container.appendChild(this.canvasContainer);\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"game-canvas\";\n    this.canvas.width = 0;\n    this.canvas.height = 0;\n    this.canvasContainer.appendChild(this.canvas);\n    this.context = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    this.gameBoard = gameBoard;\n    this.gameOfLife = gameOfLife;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.speed = this.gameOfLife.getSpeed();\n\n    const divMenu = document.createElement(\"div\");\n\n    const inputHeight = document.createElement(\"input\");\n    const inputWidth = document.createElement(\"input\");\n    const inputSpeedGame = document.createElement(\"input\");\n    const spanHeight = document.createElement(\"span\");\n    const spanWidth = document.createElement(\"span\");\n    const spanSpeed = document.createElement(\"span\");\n    const lableWidth = document.createElement(\"lable\");\n    const lableHeight = document.createElement(\"lable\");\n    const lableSpeed = document.createElement(\"lable\");\n    const stopButton = document.createElement(\"button\");\n    const startButton = document.createElement(\"button\");\n    const clearButton = document.createElement(\"button\");\n\n    container.prepend(divMenu);\n\n    divMenu.appendChild(lableHeight);\n    divMenu.appendChild(spanHeight);\n    divMenu.appendChild(inputHeight);\n    divMenu.appendChild(lableWidth);\n    divMenu.appendChild(spanWidth);\n    divMenu.appendChild(inputWidth);\n    divMenu.appendChild(lableSpeed);\n    divMenu.appendChild(spanSpeed);\n    divMenu.appendChild(inputSpeedGame);\n    divMenu.appendChild(stopButton);\n    divMenu.appendChild(startButton);\n    divMenu.appendChild(clearButton);\n\n    divMenu.classList.add(\"div-menu\");\n    stopButton.classList.add(\"button-stop\");\n    startButton.classList.add(\"button-start\");\n    clearButton.classList.add(\"button-clear\");\n    spanHeight.classList.add(\"span-value-height\");\n    spanWidth.classList.add(\"span-value-width\");\n    spanWidth.classList.add(\"span-value-speed\");\n\n    // кнопки старт и стоп\n    stopButton.textContent = \"Stop\";\n    startButton.textContent = \"Start\";\n    clearButton.textContent = \"Clear\";\n\n    // присвоение класса и типа для инпут высота\n\n    inputWidth.type = \"range\";\n    inputWidth.min = \"10\";\n    inputWidth.max = \"100\";\n    inputWidth.step = \"1\";\n    inputWidth.value = \"50\";\n    inputWidth.id = \"width-input\";\n    spanWidth.textContent = inputWidth.value;\n    lableWidth.setAttribute(\"for\", \"width-input\");\n    lableWidth.textContent = \"Width: \";\n\n    // присвоение класса и типа для инпут ширина\n\n    inputHeight.type = \"range\";\n    inputHeight.min = \"10\";\n    inputHeight.max = \"100\";\n    inputHeight.step = \"1\";\n    inputHeight.value = \"50\";\n    inputHeight.id = \"height-input\";\n    spanHeight.textContent = inputHeight.value;\n    lableHeight.setAttribute(\"for\", \"height-input\");\n    lableHeight.textContent = \"Height: \";\n\n    inputSpeedGame.type = \"range\";\n    inputSpeedGame.min = \"0.01\";\n    inputSpeedGame.max = \"2\";\n    inputSpeedGame.step = \"0.01\";\n    inputSpeedGame.value = \"1\";\n    inputSpeedGame.id = \"speed-input\";\n    spanSpeed.textContent = inputSpeedGame.value;\n    lableSpeed.setAttribute(\"for\", \"speed-input\");\n    lableSpeed.textContent = \"Game speed : \";\n\n    inputHeight.addEventListener(\"input\", () => {\n      spanHeight.textContent = inputHeight.value;\n      this.height = +inputHeight.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputWidth.addEventListener(\"input\", () => {\n      spanWidth.textContent = inputWidth.value;\n      this.width = +inputWidth.value;\n      this.gameBoard.setGameBoard(this.height, this.width);\n      this.draw();\n    });\n\n    inputSpeedGame.addEventListener(\"input\", () => {\n      spanSpeed.textContent = inputSpeedGame.value;\n      this.speed = +inputSpeedGame.value * 1000;\n    });\n\n    startButton.addEventListener(\"click\", () => {\n      this.gameOfLife.startGame();\n    });\n\n    stopButton.addEventListener(\"click\", () => {\n      this.gameOfLife.stopGame();\n    });\n\n    clearButton.addEventListener(\"click\", () => {\n      this.gameOfLife.clearGameField();\n    });\n\n    this.canvas.addEventListener(\"click\", this.onClick.bind(this));\n  }\n\n  public draw(): void {\n    if (!this.gameBoard) {\n      console.warn(\"GameBoard is not set.\");\n      return;\n    }\n\n    this.canvas.height = this.height * this.cellSize;\n    this.canvas.width = this.width * this.cellSize;\n    this.context.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n    const grid = this.gameBoard.getGrid();\n\n    for (let x = 0; x < this.height; x++) {\n      for (let y = 0; y < this.width; y++) {\n        this.context.fillStyle = grid[x][y].alive ? \"black\" : \"white\";\n        this.context.fillRect(\n          y * this.cellSize,\n          x * this.cellSize,\n          this.cellSize,\n          this.cellSize\n        );\n      }\n    }\n  }\n\n  private onClick = (event: MouseEvent): void => {\n    const y = Math.floor(event.offsetX / this.cellSize);\n    const x = Math.floor(event.offsetY / this.cellSize);\n\n    if (x >= 0 && x < this.height && y >= 0 && y < this.width) {\n      this.gameOfLife.toggleCell(x, y);\n      this.draw();\n    } else {\n      console.error(`Coordinates (${x}, ${y}) are outside the grid.`);\n    }\n  };\n\n  public setGameBoard(gameBoard: IGameBoard): void {\n    this.gameBoard = gameBoard;\n    this.width = this.gameBoard.getWidth();\n    this.height = this.gameBoard.getHeight();\n    this.draw();\n  }\n\n  public getSpeed() {\n    return this.speed;\n  }\n}\n","import { Cell } from \"./Cell\";\n\nexport interface IGameBoard {\n  getWidth(): number;\n  getHeight(): number;\n  getGrid(): Cell[][];\n  updateGrid(grid: Cell[][]): void;\n  setGameBoard(height: number, width: number): void;\n}\n\nexport class GameBoard implements IGameBoard {\n  private width: number;\n\n  private height: number;\n\n  private grid: Cell[][];\n\n  constructor(height: number, width: number) {\n    this.height = height;\n    this.width = width;\n    this.grid = this.initializeGrid();\n  }\n\n  private initializeGrid(): Cell[][] {\n    const grid: Cell[][] = [];\n    for (let x = 0; x < this.height; x++) {\n      grid[x] = [];\n      for (let y = 0; y < this.width; y++) {\n        grid[x][y] = new Cell(x, y, false);\n      }\n    }\n    return grid;\n  }\n\n  public getGrid(): Cell[][] {\n    return this.grid;\n  }\n\n  public getWidth(): number {\n    return this.width;\n  }\n\n  public getHeight(): number {\n    return this.height;\n  }\n\n  public setGameBoard(height: number, width: number): void {\n    this.width = width;\n    this.height = height;\n    this.grid = this.initializeGrid();\n  }\n\n  public updateGrid(grid: Cell[][]): void {\n    this.grid = grid;\n  }\n}\n","import \"./css/style.css\";\nimport { GameOfLife } from \"./GameOfLife\";\nimport { GameRenderer } from \"./GameRender\";\nimport { GameBoard } from \"./GameBoard\";\n\nconst gameContainer: HTMLElement | null = document.getElementById(\"app\");\nif (!gameContainer) {\n  throw new Error(\"Element with id 'app' was not found.\");\n}\n\nconst height = 50;\nconst width = 50;\nconst gameSpeed = 1000;\n\nconst board = new GameBoard(height, width);\nconst game = new GameOfLife(board, gameSpeed);\nconst renderer = new GameRenderer(gameContainer, board, game);\n\nrenderer.setGameBoard(board);\ngame.setRenderer(renderer);\n"],"names":["Cell","_createClass","x","y","alive","_classCallCheck","Error","this","GameOfLife","gameBoard","gameSpeed","_defineProperty","renderer","interval","height","getHeight","width","getWidth","grid","getGrid","key","value","render","currentAlive","isCellAlive","setCell","updateGrid","_this","newGird","Array","from","length","hasChanges","i","j","cell","neighbors","countAliveNeighbors","_this2","result","xMoveUp","xMoveDown","yMoveLeft","yMoveRight","_this3","isGameRunning","console","log","speed","getSpeed","gameIntervalId","setInterval","areAnyCellAlive","getNextGeneration","draw","stopGame","clearInterval","setGameBoard","GameRenderer","container","gameOfLife","event","Math","floor","offsetX","cellSize","offsetY","toggleCell","error","concat","canvasContainer","document","createElement","classList","add","appendChild","canvas","id","context","getContext","divMenu","inputHeight","inputWidth","inputSpeedGame","spanHeight","spanWidth","spanSpeed","lableWidth","lableHeight","lableSpeed","stopButton","startButton","clearButton","prepend","textContent","type","min","max","step","setAttribute","addEventListener","startGame","clearGameField","onClick","bind","clearRect","fillStyle","fillRect","warn","GameBoard","initializeGrid","gameContainer","getElementById","board","game","setRenderer"],"sourceRoot":""}